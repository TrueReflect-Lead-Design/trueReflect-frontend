{"version":3,"sources":["state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","config/constants/index.ts","state/hooks.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","state/actions.ts","hooks/useRefresh.ts","contexts/Localisation/translationsContext.ts","components/layout/Container.tsx","components/layout/Page.tsx","utils/multicall.ts","config/constants/types.ts","utils/addressHelpers.ts","config/constants/pools.ts","config/constants/farms.ts","config/constants/contracts.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","App.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts"],"names":["fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","BigNumber","div","pow","tokenPriceVsQuote","tokenSymbol","QuoteToken","BUSD","quoteTokenSymbol","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","pid","TokenPerBlock","info","totalAllocPoint","tokenPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserLockup","userLock","fetchFarmUserEarnings","PendingToken","rawEarnings","parsedEarnings","earnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","userLockup","farmAllowance","allowance","lockup","TOKEN","filter","isCommunity","ZERO","useFetchPublicData","useDispatch","slowRefresh","useRefresh","useEffect","useFarms","useSelector","useFarmFromPid","useFarmUser","mult","usePriceBnbBusd","usePriceCakeBusd","bnbPriceUSD","useTotalValue","bnbPrice","cakePrice","value","i","length","val","BNB","CAKE","plus","nodes","process","getNodeUrl","sample","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","interval","setInterval","prev","clearInterval","Provider","useContext","fastRefresh","defaultTranslationState","translations","setTranslations","TranslationsContext","Container","styled","theme","mediaQueries","sm","Page","lg","abi","web3","getWeb3","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","decodeFunctionResult","PoolCategory","getCakeAddress","addresses","cake","chainId","masterChef","mulltiCall","getWbnbAddress","wbnb","getLotteryAddress","lottery","getLotteryTicketAddress","lotteryNFT","pools","risk","lpSymbol","decimals","97","43114","contracts","busd","nonBnbPools","poolsConfig","p","stakingTokenName","bnbPools","nonMasterPools","sousId","masterChefContract","masterChefABI","fetchPoolsAllowance","stakingTokenAddress","contractAddress","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","localStorage","getItem","storedLang","getStoredLang","console","log","fetch","then","r","json","translationApiResponse","catch","e","error","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","useTheme","StyledThemeCopntext","config","label","icon","href","initialOpenState","items","Menu","props","useWallet","connect","reset","cakePriceUsd","login","logout","currentLang","langs","setLang","links","priceLink","Wrapper","PageLoader","Home","lazy","Farms","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","fallback","path","exact","tokenMode","component","memo","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","getBlockNumber","blockNumber","current","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions"],"mappings":"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","file":"static/js/main.1cedd97b.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { TokenPerBlock } from 'config/constants/index'\nimport { QuoteToken } from '../../config/constants/types'\n\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount;\n      let lpTotalInQuoteToken;\n      let tokenPriceVsQuote;\n      if(farmConfig.isTokenOnly){\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\n          tokenPriceVsQuote = new BigNumber(1);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n      }else{\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if(tokenAmount.comparedTo(0) > 0){\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n      }\n\n      const [info, totalAllocPoint, tokenPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: TokenPerBlock,\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        TokenPerBlock: new BigNumber(tokenPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { PendingToken } from 'config/constants/index'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    \n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    \n    return  {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n\n  })\n  \n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return  new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\nconst rValue =  new BigNumber(stakedBalance[0]._hex).toJSON()\n    return rValue\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserLockup = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userPoolLockup',\n      params: [farm.pid, account],\n    }\n  })\n\n  const userLock = await multicall(masterchefABI, calls)\n\n  return userLock\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: PendingToken,\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n  fetchFarmUserLockup,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n const userLockup = await fetchFarmUserLockup(account)\n   const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n      lockup: userLockup[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import farmsConfig from './farms'\n\n\nexport const PendingToken = 'pendingToken'\nexport const TokenPerBlock = 'tokenPerSecond'\nexport const TOKEN = 'TRT'\n\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nexport { farmsConfig, communityFarms }\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    // dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\nconst mult = pid === 0 ? (10**12) : 1 // shitcode fix for 6 decimal pool\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance).times(mult) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance).times(mult) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings).times(mult) : new BigNumber(0),\n    lockup: farm.userData ? new BigNumber(farm.userData.lockup) : new BigNumber(0),\n  }\n}\n\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 2 // BUSD-BNB LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n   const pid = 1 // CAKE-BNB LP\n   const bnbPriceUSD = usePriceBnbBusd()\n   const farm = useFarmFromPid(pid)\n   return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n// const pid = 0; // EGG-BUSD LP\n// const farm = useFarmFromPid(pid);\n// return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms();\n  const bnbPrice = usePriceBnbBusd();\n  const cakePrice = usePriceCakeBusd();\n  let value = new BigNumber(0);\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val;\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\n      }else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = (cakePrice.times(farm.lpTotalInQuoteToken));\n      }else{\n        val = (farm.lpTotalInQuoteToken);\n      }\n      value = value.plus(val);\n    }\n  }\n  return value;\n}","import sample from 'lodash/sample'\n\n// Array of available nodes to connect to\nexport const nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  return sample(nodes)\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 992px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  subTitle?: string\n  description?: string\n  launchDate: string\n  launchTime: string\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  projectSiteUrl: string\n  currency: string\n  currencyAddress: string\n  tokenDecimals: number\n  releaseBlockNumber: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'BNB',\n  'CAKE' = 'CAKE',\n  'SYRUP' = 'SYRUP',\n  'BUSD' = 'BUSD',\n  'TWT' = 'TWT',\n  'UST' = 'UST',\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport interface Address {\n  97?: string\n  43114: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  isCommunity?: boolean\n  risk: number\n  decimals: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  stakingTokenName: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n  // {\n  //   sousId: 0,\n  //   tokenName: 'CAKE',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   contractAddress: {\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\n  //     56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://pancakeswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '10',\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   tokenDecimals: 18,\n  // },\n  // {\n  //   sousId: 1,\n  //   tokenName: 'TWT',\n  //   stakingTokenName: QuoteToken.SYRUP,\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\n  //   contractAddress: {\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://trustwallet.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '20',\n  //   sortOrder: 999,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  // },\n]\n\nexport default pools\n","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst farms: FarmConfig[] = [\n  {\n    pid: 0,\n    risk: 5,\n    isTokenOnly: true,\n    lpSymbol: 'TRT',\n    decimals: 6,\n    lpAddresses: {\n      97: '',\n      43114: '0x7dc7be6a61eeB77ABe0f053465e2ea7dD9F9EE21', \n    },\n    tokenSymbol: 'TRT',\n    tokenAddresses: {\n      97: '',\n      43114: '0x70B907f3F7231bE122100dac51C1995e6804E346',\n    },\n    quoteTokenSymbol: QuoteToken.CAKE,\n    quoteTokenAdresses: contracts.cake,\n  },\n\n  {\n    pid: 1,\n    risk: 5,\n    lpSymbol: 'TRT-AVAX LP',\n    decimals: 6,\n    lpAddresses: {\n      97: '',\n      43114: '0x7bB90AC513Afb34b3BF07AB7cD5d7B51f92bB11d',\n    },\n    tokenSymbol: 'TRT',\n    tokenAddresses: {\n      97: '',\n      43114: '0x70B907f3F7231bE122100dac51C1995e6804E346',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 2,\n    risk: 3,\n    lpSymbol: 'AVAX-DAI.e LP',\n    decimals: 18,\n    lpAddresses: {\n      97: '',\n      43114: '0xba09679ab223c6bdaf44d45ba2d7279959289ab0',\n    },\n    tokenSymbol: 'AVAX',\n    tokenAddresses: {\n      97: '',\n      43114: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },  {\n    pid: 3,\n    risk: 3,\n    decimals: 6,\n    lpSymbol: 'TRT-DAI.e LP',\n    lpAddresses: {\n      97: '',\n      43114: '0x7dc7be6a61eeB77ABe0f053465e2ea7dD9F9EE21',\n    },\n    tokenSymbol: 'TRT',\n    tokenAddresses: {\n      97: '',\n      43114: '0x70B907f3F7231bE122100dac51C1995e6804E346',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n\n]\n\nexport default farms\n","export default {\n  cake: {\n    43114: '0x70B907f3F7231bE122100dac51C1995e6804E346',\n    97: '',\n  },\n  masterChef: {\n    43114: '0x882c0bf397D50D8cA7dc041DD94f1b6A7150a07a',\n    97: '',\n  },\n  wbnb: {\n    43114: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    97: '',\n  },\n  lottery: {\n    43114: '',\n    97: '',\n  },\n  lotteryNFT: {\n    43114: '',\n    97: '',\n  },\n  mulltiCall: {\n    43114: '0xc392AEF4a918A7Ef1448A6Dc66179aF7a9387973',\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\n  },\n  busd: {\n    43114: '0xd586E7F844cEa2F87f50152665BCbc2C279D8d70',\n    97: '',\n  },\n}\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\nimport { PendingToken } from 'config/constants/index'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.PendingToken('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Kanit', sans-serif;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  ZHCN,\n  ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then(r=>r.json())\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error(\"ERROR\");\n          console.error(e);\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from '@pancakeswap-libs/uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\nimport { ThemeContext } from 'contexts/ThemeContext'\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeCopntext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\n\n\nconst config: MenuEntry[] = [\n  {\n    label: 'Home',\n    icon: 'HomeIcon',\n    href: '/'\n  },\n  {\n    label: 'Trade',\n    icon: 'TradeIcon',\n    initialOpenState: false,\n    items: [\n      {\n        label: 'Exchange',\n        href: 'https://exchange.truereflect.finance/#/swap'\n      },\n      {\n        label: 'Liquidity',\n        href: 'https://exchange.truereflect.finance/#/pool'\n      }\n    ]\n  },\n  {\n    label: 'Staking',\n    icon: 'FarmIcon',\n    initialOpenState: true,\n    items: [\n      {\n        label: 'Farms',\n        href: '/farms'\n      },\n      {\n        label: 'Pools',\n        href: '/pools'\n      }\n    ]\n  },\n  {\n    label: 'Deployed Contracts',\n    icon: 'AuditIcon',\n    items: [\n      {\n        label: 'True Reflect Token',\n        href: 'https://cchain.explorer.avax.network/address/0x70b907f3f7231be122100dac51c1995e6804e346/',\n      },      \n      {\n        label: 'MasterChef',\n        href: 'https://cchain.explorer.avax.network/address/0x882c0bf397D50D8cA7dc041DD94f1b6A7150a07a/',\n      },\n    ]\n  },\n]\n\nexport default config\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport useTheme from 'hooks/useTheme'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\nimport config from './config'\n\nconst Menu = (props) => {\n  const { account, connect, reset } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isDark, toggleTheme } = useTheme()\n  const cakePriceUsd = usePriceCakeBusd()\n\n  return (\n    <UikitMenu\n      account={account}\n      login={connect}\n      logout={reset}\n      isDark={isDark}\n      toggleTheme={toggleTheme}\n      currentLang={selectedLanguage && selectedLanguage.code}\n      langs={allLanguages}\n      setLang={setSelectedLanguage}\n      cakePriceUsd={cakePriceUsd.toNumber()}\n      links={config}\n      priceLink=\"https://info.pangolin.exchange/#/token/0x70b907f3f7231be122100dac51c1995e6804e346\"\n      {...props}\n    />\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from '@pancakeswap-libs/uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPublicData } from 'state/hooks'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst Farms = lazy(() => import('./views/Farms'))\n// const Lottery = lazy(() => import('./views/Lottery'))\n// const Pools = lazy(() => import('./views/Pools'))\n// const Ifos = lazy(() => import('./views/Ifos'))\nconst NotFound = lazy(() => import('./views/NotFound'))\n// const Nft = lazy(() => import('./views/Nft'))\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  useFetchPublicData()\n\n  return (\n    <Router>\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            <Route path=\"/home\" exact>\n              <Home />\n            </Route>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route path=\"/farms\">\n              <Farms />\n            </Route>\n            <Route path=\"/pools\">\n              <Farms tokenMode/>\n            </Route>\n            {/* <Route path=\"/pools\"> */}\n            {/*  <Pools /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/lottery\"> */}\n            {/*  <Lottery /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/ifo\"> */}\n            {/*  <Ifos /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/nft\"> */}\n            {/*  <Nft /> */}\n            {/* </Route> */}\n            {/* Redirect */}\n            {/* <Route path=\"/staking\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/syrup\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* 404 */}\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Menu>\n\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={chainId}\n            connectors={{\n              walletconnect: { rpcUrl },\n              bsc,\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, httpProvider }\n"],"sourceRoot":""}