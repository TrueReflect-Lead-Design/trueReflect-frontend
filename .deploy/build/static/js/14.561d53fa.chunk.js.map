{"version":3,"sources":["hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useTokenBalance.ts","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/components/Timer.tsx","views/Home/Home.tsx"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","PendingToken","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","TranslateString","useI18n","color","style","lineHeight","CakeWalletBalance","cakeBalance","useTokenBalance","tokenAddress","setBalance","ethereum","getTokenBalance","res","fetchBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","getCakeAddress","eggPrice","usePriceCakeBusd","toNumber","reduce","accum","earning","pow","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","TOKEN","toFixed","id","disabled","length","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","getContract","cakeABI","methods","call","supply","fetchTotalSupply","useTotalSupply","burnedBalance","balanceOf","bal","useBurnedBalance","farms","useFarms","circSupply","minus","marketCap","times","eggPerBlock","TokenPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","options","chrome","hourSeconds","daySeconds","timerProps","isPlaying","strokeWidth","trailColor","renderTime","dimension","time","className","TimerBox","Timer","remainingTime","Date","now","daysDuration","Math","ceil","initialRemainingTime","elapsedTime","onComplete","totalElapsedTime","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/14.561d53fa.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig, PendingToken } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: PendingToken,\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}{countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({earningsSum}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig, PendingToken } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: PendingToken,\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport { TOKEN } from 'config/constants/index'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/egg/2a.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress())) *10**12 // shitcode for 6 decimal native\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0) *10**12 // shitcode fix for 6 decimals\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/egg/2.png\" alt=\"token logo\" width={64} height={64} />\n        <Block>\n          <Label>{TOKEN} to Harvest</Label>\n          <CakeHarvestBalance earningsSum={earningsSum}/>\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>{TOKEN} in Wallet</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting EGG')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms();\n  const eggPrice = usePriceCakeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = eggPrice.times(circSupply);\n\n  let eggPerBlock = 0;\n  if(farms && farms[0] && farms[0].TokenPerBlock){\n    eggPerBlock = new BigNumber(farms[0].TokenPerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'Egg Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap,6)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Supply')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply,6)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New TRT/block')}</Text>\n          <Text bold fontSize=\"14px\">{eggPerBlock}</Text>\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">Reflect Fee</Text>\n          <Text bold fontSize=\"14px\">5%</Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue();\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(999, 'Total Value Locked (TVL)')}\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n            <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\n          {/* </Heading> */}\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'TrueReflectDefi'\n          }}\n          options={{\n            height: '300',\n            chrome: \"noheader, nofooter\",\n            width: \"400\"\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React from 'react';\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport styled from 'styled-components'\n\nconst minuteSeconds = 60;\n  const hourSeconds = 3600;\n  const daySeconds = 86400;\n\n  const timerProps = {\n    isPlaying: true,\n    size: 120,\n    strokeWidth: 10,\n    trailColor: \"#15066a\"\n  };\n\n  const renderTime = (dimension, time) => {\n    return (\n      <div className=\"time-wrapper\">\n        <div className=\"time\">{time}</div>\n        <div>{dimension}</div>\n      </div>\n    );\n  };\n\n  // eslint-disable-next-line no-bitwise\n  const getTimeSeconds = (time) => (minuteSeconds - time) | 0;\n  // eslint-disable-next-line no-bitwise\n  const getTimeMinutes = (time) => ((time % hourSeconds) / minuteSeconds) | 0;\n  // eslint-disable-next-line no-bitwise\n  const getTimeHours = (time) => ((time % daySeconds) / hourSeconds) | 0;\n  // eslint-disable-next-line no-bitwise\n  const getTimeDays = (time) => (time / daySeconds) | 0;\n\nconst TimerBox = styled.div`\n  display: flex;\n  justify-content: space-around;\n  font-family: 'IBM Plex Sans', sans-serif;;\n  text-align: center;\n  padding-top: 10px;\n  margin-bottom: auto;\n  `\nconst Timer = () => {\n\n\n  const stratTime = Date.now() / 1000; // use UNIX timestamp in seconds\n  const endTime =  1633322916; // use UNIX timestamp in seconds\n\n  const remainingTime = endTime - stratTime;\n  const days = Math.ceil(remainingTime / daySeconds);\n  const daysDuration = days * daySeconds;\n\n  return (\n  <TimerBox>\n    <CountdownCircleTimer\n        {...timerProps}\n        colors=\"#2a1a89\"\n        duration={daysDuration}\n        initialRemainingTime={remainingTime}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"days\", getTimeDays(daysDuration - elapsedTime))\n        }\n      </CountdownCircleTimer>\n      <CountdownCircleTimer\n        {...timerProps}\n        colors=\"#2a1a89\"\n        duration={daySeconds}\n        initialRemainingTime={remainingTime % daySeconds}\n        onComplete={(totalElapsedTime) => [\n          remainingTime - totalElapsedTime > hourSeconds, 10\n        ]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"hours\", getTimeHours(daySeconds - elapsedTime))\n        }\n      </CountdownCircleTimer>\n      <CountdownCircleTimer\n        {...timerProps}\n        colors=\"#2a1a89\"\n        duration={hourSeconds}\n        initialRemainingTime={remainingTime % hourSeconds}\n        onComplete={(totalElapsedTime) => [\n          remainingTime - totalElapsedTime > minuteSeconds, 10\n        ]}\n      >\n        {({ elapsedTime }) =>\n          renderTime(\"minutes\", getTimeMinutes(hourSeconds - elapsedTime))\n        }\n      </CountdownCircleTimer>\n\n    </TimerBox>\n  )\n\n};\n\nexport default Timer;\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\nimport TimerBox from \"./components/Timer\"\n\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/egg/3.png');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/egg/3.png'), url('/images/egg/3b.png');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Text>{TranslateString(5780000, 'Innovative design and original Token Standards brought to Avalanche Chain.')}</Text>\n        <Heading as=\"h1\" size=\"xl\" mb=\"16px\" color=\"secondary\">\n          {TranslateString(5700006, 'Farming starts in')}\n        </Heading>\n        <TimerBox />\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <TwitterCard/>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}